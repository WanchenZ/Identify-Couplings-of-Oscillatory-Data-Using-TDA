##### generate a batch of sythetic data and concatenate the two components in each
##### generate PD arrays

L = 1
I = L * L /9.81
w_0 = math.sqrt(L/I) # L/I = 1
T = 30
spacing = 20
t = np.linspace(0, T, T*spacing)
w = []
theta = []
phi = []
data_combined = []
data_embedded = []
periodic_persistence_diagrams = []
PersL = []
v_coupled = []


##### sliding window setup
embedding_dimension_periodic = 6
embedding_time_delay_periodic = 5
stride = 2
STE=SingleTakensEmbedding(parameters_type="fixed", time_delay=embedding_time_delay_periodic,
    dimension=embedding_dimension_periodic,stride=stride)

# PH
homology_dimensions = [0,1,2]
periodic_persistence = VietorisRipsPersistence(homology_dimensions=homology_dimensions, n_jobs=6)

# PL
pl = PersistenceLandscape(n_layers=15, n_bins=50, n_jobs=None)

for k in range(1,50):
  w.append(math.sqrt((L + 1/2 * k * L * L) / I ))
  theta.append(np.cos( (w_0- w[k-1])/2 * t ) * np.cos( (w_0+ w[k-1])/2 * t ))
  phi.append(np.sin( (w_0-w[k-1])/2 * t ) * np.sin( (w_0+w[k-1])/2 * t ))
  theta[k-1] = np.array(theta[k-1])
  phi[k-1] = np.array(phi[k-1])
  data_combined.append(np.empty(T*spacing*2))

  for i in range(T*spacing):
    data_combined[k-1][2*i] = theta[k-1][i]
    data_combined[k-1][2*i+1] = phi[k-1][i]

  data_embedded.append(STE.fit_transform(data_combined[k-1]))

  # PH
  data_embedded[k-1] = data_embedded[k-1][None, :, :]
  %time periodic_persistence_diagrams.append(periodic_persistence.fit_transform(data_embedded[k-1]))

  # PL
  PersL.append(pl.fit_transform_plot(periodic_persistence_diagrams[k-1]))# form vector input for SVM using H1 and H2
  # use first 15 layers in H1 and H2
  v_coupled.append(np.concatenate((PersL[k-1][0,15],PersL[k-1][0,16], PersL[k-1][0,17] , PersL[k-1][0,18] , PersL[k-1][0,19],
                                    PersL[k-1][0,20] , PersL[k-1][0,21] ,PersL[k-1][0,22] ,PersL[k-1][0,23] ,PersL[k-1][0,24] ,
                                   PersL[k-1][0,25] ,PersL[k-1][0,26] ,PersL[k-1][0,27] ,PersL[k-1][0,28] ,PersL[k-1][0,29] ,
                                   PersL[k-1][0,30] ,PersL[k-1][0,31] ,PersL[k-1][0,32] ,PersL[k-1][0,33] ,PersL[k-1][0,34] ,
                                   PersL[k-1][0,35] ,PersL[k-1][0,36] ,PersL[k-1][0,37] ,PersL[k-1][0,38] ,PersL[k-1][0,39] ,
                                   PersL[k-1][0,40] ,PersL[k-1][0,41] ,PersL[k-1][0,42] , PersL[k-1][0,43] ,PersL[k-1][0,44]), axis = 0))


###### Plot the ones wanted

k= 10
print("k = {}, period = {}".format(k,T))
#plot_point_cloud(data_embedded[k-1])
plot_diagram(periodic_persistence_diagrams[k-1][0])




